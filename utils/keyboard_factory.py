from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, List, Any

class KeyboardFactory:
    """Factory Pattern implementation for creating keyboards"""
    
    @staticmethod
    def create_main_keyboard(running: bool = False, auto_forward: bool = False) -> Any:
        """Create main menu keyboard"""
        kb = InlineKeyboardBuilder()
        kb.button(
            text="üîÑ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É" if not running else "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É",
            callback_data="toggle_forward"
        )
        kb.button(
            text=f"‚ö° –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞: {'–í–ö–õ' if auto_forward else '–í–´–ö–õ'}",
            callback_data="toggle_auto_forward"
        )
        kb.button(text="‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="interval_menu")
        kb.button(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats")
        kb.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="channels")
        kb.button(text="üí¨ –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤", callback_data="list_chats")
        kb.button(text="ü§ñ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="clone_bot")
        kb.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–æ–Ω–∞–º–∏", callback_data="manage_clones")
        kb.adjust(2)
        return kb.as_markup()

    @staticmethod
    async def create_interval_keyboard() -> Any:
        """Create interval selection keyboard"""
        kb = InlineKeyboardBuilder()
        intervals = [
            ("5–º", 300), ("15–º", 900), ("30–º", 1800),
            ("1—á", 3600), ("2—á", 7200), ("6—á", 21600), 
            ("12—á", 43200), ("24—á", 86400)
        ]
        for label, seconds in intervals:
            kb.button(text=label, callback_data=f"interval_{seconds}")
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(4)
        return kb.as_markup()

    @staticmethod
    def create_chat_list_keyboard(chats: Dict[int, str]) -> Any:
        """Create chat list keyboard with remove buttons"""
        kb = InlineKeyboardBuilder()
        for chat_id, title in chats.items():
            kb.button(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {title}",
                callback_data=f"remove_{chat_id}"
            )
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(1)
        return kb.as_markup()

    @staticmethod
    def create_channel_interval_keyboard(channels: List[str], page: int = 0, channel_info: Dict[str, str] = None, current_intervals: Dict[str, Dict[str, Any]] = None, per_page: int = 5) -> Any:
        """Create keyboard for setting intervals between channels with pagination and real channel names"""
        kb = InlineKeyboardBuilder()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∫–∞–Ω–∞–ª–æ–≤
        channel_pairs = []
        for i, channel in enumerate(channels):
            if i < len(channels) - 1:
                next_channel = channels[i + 1]
                channel_pairs.append((channel, next_channel))
        
        if not channel_pairs:
            kb.button(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –∫–∞–Ω–∞–ª–æ–≤", callback_data="dummy")
            kb.button(text="–ù–∞–∑–∞–¥", callback_data="channels")
            return kb.as_markup()
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_pairs = len(channel_pairs)
        start_idx = page * per_page
        end_idx = min(start_idx + per_page, total_pairs)
        current_pairs = channel_pairs[start_idx:end_idx]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for channel1, channel2 in current_pairs:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
            if channel_info:
                name1 = channel_info.get(channel1, channel1)
                name2 = channel_info.get(channel2, channel2)
            else:
                name1 = channel1
                name2 = channel2
            
            # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–µ
            if name1 == channel1 and channel1.startswith('-100'):
                display_name1 = f"ID:{channel1[-6:]}"  # –ö–æ—Ä–æ—Ç–∫–∏–π ID
            else:
                display_name1 = name1[:10] + "..." if len(name1) > 10 else name1
                
            if name2 == channel2 and channel2.startswith('-100'):
                display_name2 = f"ID:{channel2[-6:]}"  # –ö–æ—Ä–æ—Ç–∫–∏–π ID
            else:
                display_name2 = name2[:10] + "..." if len(name2) > 10 else name2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            interval_text = ""
            if current_intervals and channel1 in current_intervals:
                interval_data = current_intervals.get(channel1, {})
                if interval_data.get("next_channel") == channel2:
                    interval_seconds = interval_data.get("interval", 0)
                    if interval_seconds > 0:
                        if interval_seconds >= 3600:
                            interval_text = f" ({interval_seconds//3600}—á)"
                        else:
                            interval_text = f" ({interval_seconds//60}–º)"
                    else:
                        interval_text = " (–Ω–µ —É—Å—Ç.)"
                else:
                    interval_text = " (–Ω–µ —É—Å—Ç.)"
            else:
                interval_text = " (–Ω–µ —É—Å—Ç.)"
            
            kb.button(
                text=f"‚è±Ô∏è {display_name1} ‚Üí {display_name2}{interval_text}",
                callback_data=f"interval_between_{channel1}_{channel2}"
            )
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        navigation_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if page > 0:
            navigation_buttons.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"channel_intervals_page_{page - 1}"))
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        total_pages = (total_pairs + per_page - 1) // per_page
        if total_pages > 1:
            navigation_buttons.append((f"üìÑ {page + 1}/{total_pages}", "dummy"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if end_idx < total_pairs:
            navigation_buttons.append(("‚û°Ô∏è –î–∞–ª–µ–µ", f"channel_intervals_page_{page + 1}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        for text, callback in navigation_buttons:
            kb.button(text=text, callback_data=callback)
        
        kb.button(text="üîô –ö –∫–∞–Ω–∞–ª–∞–º", callback_data="channels")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
        kb.adjust(1)  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
        if len(navigation_buttons) > 0:
            kb.adjust(1, len(navigation_buttons), 1)  # 1 –∫–Ω–æ–ø–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Ä—è–¥, 1 –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        
        return kb.as_markup()

    @staticmethod
    def create_channel_interval_options(channel1: str, channel2: str) -> Any:
        """Create keyboard with interval options between two channels"""
        kb = InlineKeyboardBuilder()
        intervals = [
            ("1–º", 60), ("5–º", 300), ("10–º", 600),
            ("15–º", 900), ("30–º", 1800), ("1—á", 3600)
        ]
        
        for label, seconds in intervals:
            kb.button(
                text=label, 
                callback_data=f"set_interval_{channel1}_{channel2}_{seconds}"
            )
        
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="channel_intervals")
        kb.adjust(3)
        return kb.as_markup()

    @staticmethod
    def create_channel_management_keyboard(channels: List[str]) -> Any:
        """Create simplified channel management keyboard"""
        kb = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")
        
        if channels:
            kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_channel_menu")
            kb.button(text="‚ÜïÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data="reorder_channels")
        
        if len(channels) >= 2:
            kb.button(text="‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="channel_intervals")
        
        kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(2, 1, 1, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–π
        return kb.as_markup()

    @staticmethod 
    def create_channel_removal_keyboard(channels: List[str], page: int = 0, channel_info: Dict[str, str] = None, per_page: int = 5) -> Any:
        """Create keyboard for channel removal with pagination and real channel names"""
        kb = InlineKeyboardBuilder()
        
        if not channels:
            kb.button(text="–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", callback_data="dummy")
            kb.button(text="üîô –ö –∫–∞–Ω–∞–ª–∞–º", callback_data="channels")
            return kb.as_markup()
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_channels = len(channels)
        start_idx = page * per_page
        end_idx = min(start_idx + per_page, total_channels)
        current_channels = channels[start_idx:end_idx]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for channel in current_channels:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            if channel_info and channel in channel_info:
                channel_name = channel_info[channel]
            else:
                channel_name = channel
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            if channel_name == channel and channel.startswith('-100'):
                # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —ç—Ç–æ ID –∫–∞–Ω–∞–ª–∞
                display_name = f"ID: {channel[-8:]}"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                display_name = channel_name if len(channel_name) <= 25 else channel_name[:22] + "..."
            
            kb.button(
                text=f"‚ùå {display_name}",
                callback_data=f"remove_channel_{channel}"
            )
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        navigation_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if page > 0:
            navigation_buttons.append(("‚¨ÖÔ∏è", f"remove_channel_page_{page - 1}"))
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        total_pages = (total_channels + per_page - 1) // per_page
        if total_pages > 1:
            navigation_buttons.append((f"{page + 1}/{total_pages}", "dummy"))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"  
        if end_idx < total_channels:
            navigation_buttons.append(("‚û°Ô∏è", f"remove_channel_page_{page + 1}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        if len(navigation_buttons) > 1:
            for text, callback in navigation_buttons:
                kb.button(text=text, callback_data=callback)
        
        kb.button(text="üîô –ö –∫–∞–Ω–∞–ª–∞–º", callback_data="channels")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
        kb.adjust(1)  # –ö–∞–Ω–∞–ª—ã –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥
        if len(navigation_buttons) > 1:
            kb.adjust(1, len(navigation_buttons), 1)  # –ö–∞–Ω–∞–ª—ã, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        
        return kb.as_markup()